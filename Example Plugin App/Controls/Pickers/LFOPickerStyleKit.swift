//
//  LFOPickerStyleKit.swift
//  RomPlayer
//
//  Created by Matthew Fecher on 10/26/17.
//  Copyright Â© 2017 AudioKit. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//

import UIKit

public class LFOPickerStyleKit: NSObject {

    //// Drawing Methods

    @objc dynamic public class func drawLFOWaveformPicker(frame: CGRect = CGRect(x: 0, y: 0, width: 198, height: 40), fraction: CGFloat = 0) {
        //// General Declarations
        // This non-generic function dramatically improves compilation times of complex expressions.
        func fastFloor(_ x: CGFloat) -> CGFloat { return floor(x) }

        //// Color Declarations
        let selected = UIColor(red: 0.455, green: 0.624, blue: 0.725, alpha: 1.000)
        let unselected = UIColor(red: 0.533, green: 0.533, blue: 0.533, alpha: 1.000)

        //// Variable Declarations
        let color1 = fraction <= 0.3 ? selected : unselected
        let color2 = fraction > 0.3 && fraction <= 0.6 ? selected : unselected
        let color3 = fraction > 0.6 && fraction <= 0.85 ? selected : unselected
        let color4 = fraction > 0.85 && fraction <= 1 ? selected : unselected

        //// Subframes
        let picker: CGRect = CGRect(x: frame.minX + 1, y: frame.minY + 1, width: fastFloor((frame.width - 1) * 0.99492 + 0.5), height: fastFloor((frame.height - 1) * 0.97436 + 0.5))

        //// Picker
        //// background Drawing

        //// Square Drawing
        let squarePath = UIBezierPath()
        squarePath.move(to: CGPoint(x: picker.minX + 0.32277 * picker.width, y: picker.minY + 0.52381 * picker.height))
        squarePath.addLine(to: CGPoint(x: picker.minX + 0.32277 * picker.width, y: picker.minY + 0.33333 * picker.height))
        squarePath.addLine(to: CGPoint(x: picker.minX + 0.36913 * picker.width, y: picker.minY + 0.33333 * picker.height))
        squarePath.addLine(to: CGPoint(x: picker.minX + 0.36913 * picker.width, y: picker.minY + 0.71429 * picker.height))
        squarePath.addLine(to: CGPoint(x: picker.minX + 0.41550 * picker.width, y: picker.minY + 0.71429 * picker.height))
        squarePath.addLine(to: CGPoint(x: picker.minX + 0.41550 * picker.width, y: picker.minY + 0.33333 * picker.height))
        squarePath.addLine(to: CGPoint(x: picker.minX + 0.46186 * picker.width, y: picker.minY + 0.33333 * picker.height))
        squarePath.addLine(to: CGPoint(x: picker.minX + 0.46186 * picker.width, y: picker.minY + 0.52381 * picker.height))
        color2.setStroke()
        squarePath.lineWidth = 2
        squarePath.stroke()

        //// DownSaw Drawing
        let downSawPath = UIBezierPath()
        downSawPath.move(to: CGPoint(x: picker.minX + 0.85403 * picker.width, y: picker.minY + 0.77500 * picker.height))
        downSawPath.addLine(to: CGPoint(x: picker.minX + 0.85403 * picker.width, y: picker.minY + 0.37500 * picker.height))
        downSawPath.addLine(to: CGPoint(x: picker.minX + 0.91973 * picker.width, y: picker.minY + 0.77500 * picker.height))
        color4.setStroke()
        downSawPath.lineWidth = 2
        downSawPath.stroke()

        //// UpSaw Drawing
        let upSawPath = UIBezierPath()
        upSawPath.move(to: CGPoint(x: picker.minX + 0.66706 * picker.width, y: picker.minY + 0.77500 * picker.height))
        upSawPath.addLine(to: CGPoint(x: picker.minX + 0.66706 * picker.width, y: picker.minY + 0.37500 * picker.height))
        upSawPath.addLine(to: CGPoint(x: picker.minX + 0.60136 * picker.width, y: picker.minY + 0.77500 * picker.height))
        color3.setStroke()
        upSawPath.lineWidth = 2
        upSawPath.stroke()

        //// SineWave Drawing
        let sineWavePath = UIBezierPath()
        sineWavePath.move(to: CGPoint(x: picker.minX + 0.05053 * picker.width, y: picker.minY + 0.52333 * picker.height))
        sineWavePath.addCurve(to: CGPoint(x: picker.minX + 0.07580 * picker.width, y: picker.minY + 0.32500 * picker.height), controlPoint1: CGPoint(x: picker.minX + 0.05053 * picker.width, y: picker.minY + 0.52333 * picker.height), controlPoint2: CGPoint(x: picker.minX + 0.04548 * picker.width, y: picker.minY + 0.32500 * picker.height))
        sineWavePath.addCurve(to: CGPoint(x: picker.minX + 0.11623 * picker.width, y: picker.minY + 0.75000 * picker.height), controlPoint1: CGPoint(x: picker.minX + 0.10612 * picker.width, y: picker.minY + 0.32500 * picker.height), controlPoint2: CGPoint(x: picker.minX + 0.07580 * picker.width, y: picker.minY + 0.75000 * picker.height))
        sineWavePath.move(to: CGPoint(x: picker.minX + 0.18192 * picker.width, y: picker.minY + 0.52333 * picker.height))
        sineWavePath.addCurve(to: CGPoint(x: picker.minX + 0.15666 * picker.width, y: picker.minY + 0.32500 * picker.height), controlPoint1: CGPoint(x: picker.minX + 0.18192 * picker.width, y: picker.minY + 0.52333 * picker.height), controlPoint2: CGPoint(x: picker.minX + 0.18698 * picker.width, y: picker.minY + 0.32500 * picker.height))
        sineWavePath.addCurve(to: CGPoint(x: picker.minX + 0.11623 * picker.width, y: picker.minY + 0.75000 * picker.height), controlPoint1: CGPoint(x: picker.minX + 0.12634 * picker.width, y: picker.minY + 0.32500 * picker.height), controlPoint2: CGPoint(x: picker.minX + 0.15666 * picker.width, y: picker.minY + 0.75000 * picker.height))
        color1.setStroke()
        sineWavePath.lineWidth = 2
        sineWavePath.stroke()
    }

}
