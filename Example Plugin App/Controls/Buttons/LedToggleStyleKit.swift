//
//  LedToggleStyleKit.swift
//  AudioKitSynth
//
//  Created by Matthew Fecher on 9/19/17.
//  Copyright Â© 2017 AudioKit. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//

import UIKit

public class LedToggleStyleKit: NSObject {

    //// Drawing Methods

    @objc dynamic public class func drawLedButton(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 33, height: 24), resizing: ResizingBehavior = .aspectFit, isToggled: Bool = true, offColor: UIColor) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 33, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 33, y: resizedFrame.height / 24)
        let resizedShadowScale: CGFloat = min(resizedFrame.width / 33, resizedFrame.height / 24)

        //// Color Declarations
        let onColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Shadow Declarations
        let shadow = NSShadow()
        shadow.shadowColor = onColor
        shadow.shadowOffset = CGSize(width: 0, height: 0)
        shadow.shadowBlurRadius = 8

        //// Variable Declarations
        let expression = isToggled ? onColor : offColor

        //// LedBack Drawing
        let ledBackPath = UIBezierPath(rect: CGRect(x: 8, y: 8, width: 15, height: 7))
        expression.setFill()
        ledBackPath.fill()

        if (isToggled) {
            //// LED_On Drawing
            let lED_OnPath = UIBezierPath(rect: CGRect(x: 8, y: 8, width: 15, height: 7))
            context.saveGState()
            context.setShadow(offset: CGSize(width: shadow.shadowOffset.width * resizedShadowScale, height: shadow.shadowOffset.height * resizedShadowScale), blur: shadow.shadowBlurRadius * resizedShadowScale, color: (shadow.shadowColor as! UIColor).cgColor)
            onColor.setFill()
            lED_OnPath.fill()
            context.restoreGState()

        }

        context.restoreGState()

    }

    @objc(LedToggleStyleKitResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
            case .aspectFit:
                scales.width = min(scales.width, scales.height)
                scales.height = scales.width
            case .aspectFill:
                scales.width = max(scales.width, scales.height)
                scales.height = scales.width
            case .stretch:
                break
            case .center:
                scales.width = 1
                scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
